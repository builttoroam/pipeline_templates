trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string
  paths:
    include:
    - azure/steps/bicep/bicep.yml

pool:
  vmImage: 'windows-latest'

variables:
  - template: ../test-variables.yml

stages:
  - stage: Test_ARM
    pool:
      vmImage: 'windows-latest'

    jobs:
    - job: Bicep_Run
      steps:
      - task: AzureCLI@2
        displayName: Delete existing resource group - tidy up from any failed runs
        inputs:
          azureSubscription: $(az_testing_service_connection)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            $exists = az group exists -n $(az_testing_resource_group_name)
            Write-Host "RG already exists $exists"
            if( $exists -eq 'True')
            {
              az group delete -n $(az_testing_resource_group_name) -y
              Write-Host "Existing RG deleted to clean up from prior test runs"
            }

      - task: AzureCLI@2
        displayName: Create testing resource group
        inputs:
          azureSubscription: $(az_testing_service_connection)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Creating RG: $(az_testing_resource_group_name)"
            az group create -n $(az_testing_resource_group_name) -l $(az_testing_resource_location)
            Write-Host "Created: $(az_testing_resource_group_name)"

      - template: ../../steps/bicep/bicep-run.yml
        parameters:
          name: BicepRun
          az_service_connection: $(az_testing_service_connection)
          az_resource_group_name: $(az_testing_resource_group_name)
          az_resource_location: $(az_testing_resource_location)
          bicep_file_path: '$(System.DefaultWorkingDirectory)/$(storageaccount_bicep_filepath)'
          arm_parameters: '-storageAccountName $(az_testing_storageaccount_name) -containerName $(az_testing_blob_container_name)'

      - template: ../../steps/checks/check-az-resource-exists.yml
        parameters:
          name: CheckStorageAccountExists
          az_service_connection: $(az_testing_service_connection)
          resource_type: 'storage account check-name'
          check_property: 'nameAvailable'
          resource_name: $(az_testing_storageaccount_name)
          invert: true
          throw_on_fail: true

      - template: ../../steps/checks/check-az-resource-exists.yml
        parameters:
          name: CheckStorageAccountExists
          az_service_connection: $(az_testing_service_connection)
          resource_type: 'storage container exists --account-name $(az_testing_storageaccount_name)'
          resource_name: $(az_testing_blob_container_name)
          throw_on_fail: true

      - task: AzureCLI@2
        displayName: Delete testing resource group
        condition: always()
        inputs:
          azureSubscription: $(az_testing_service_connection)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            $exists = az group exists -n $(az_testing_resource_group_name)
            Write-Host "RG exists after testing: $exists"
            if( $exists -eq 'True')
            {
              az group delete -n $(az_testing_resource_group_name) -y
              Write-Host "RG cleaned up after test run completed"
            }
