parameters:
# new_value - Required - The new value of the variable
- name: new_value
  type: string
  default: ''
# variable_name - Required - The name of the variable to set
- name: variable_name
  type: string
  default: ''
# variables_to_set - Required - Array {variable_name, new_value}
- name: variables_to_set
  type: string
  default: ''
# name - (Optional) - Specify a name if you need to extract output variable values
- name: name
  type: string
  default: ''
# ignore_null_or_empty_values - (Optional) - Ignores values that are null (or empty string), not setting the variable value (Default: false)
- name: ignore_null_or_empty_values
  type: string
  default: 'False'

steps:
  - script: |
      echo -------------------------------------------------------------
      echo ------------------------ PARAMETERS -------------------------
      echo -------------------------------------------------------------
      echo New value: '${{ parameters.new_value }}'
      echo Variable name: '${{ parameters.variable_name }}'
      echo Variable to set: '${{ parameters.variables_to_set }}'
      echo Name: '${{ parameters.name }}'
      echo Ignore null or empty: '${{ parameters.ignore_null_or_empty_values }}'
      echo -------------------------------------------------------------
      echo -------------------------------------------------------------
    displayName: 'Print parameters and variables'
    
  - task: PowerShell@2
    ${{ if and( ne(parameters.name, ''), ne(parameters.variable_name,'')) }}:
      name: ${{ parameters.name }}
    condition: and( succeeded(), ${{ ne(parameters.variable_name,'') }})
    displayName: 'Set variable [${{ parameters.variable_name }}] to value [${{ parameters.new_value }}]'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
          $variable_value = '${{ parameters.new_value }}'
          Write-Host "Variable value is $variable_value"

          $variable_name = '${{ parameters.variable_name }}'
          Write-Host "Variable to set $variable_name"

          If ( (($variable_value -eq $null) -or ($variable_value -eq "")) -and ('${{ parameters.ignore_null_or_empty_values }}' -eq 'True') )
          {
            Write-Host "New value is null and Ignore null values is true - Not setting variable"
          }
          else{
            echo "##vso[task.setvariable variable=$variable_name;isOutput=true]$variable_value"
            Write-Host "Output variable '$variable_name' set to $variable_value"
          }

  - task: PowerShell@2
    ${{ if and( ne(parameters.name, ''), eq(parameters.variable_name,'')) }}:
      name: ${{ parameters.name }}
    condition: and( succeeded(), ${{ eq(parameters.variable_name,'') }})
    displayName: 'Set variables'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
          $allVars = '${{ parameters.variables_to_set }}'
          $params = $allVars -split ";"
          foreach($param in $params) 
          {
            $splits = $param.Split("|")
            $variable_name = $splits[0]
            Write-Host "Variable name: $variable_name"
            $variable_value = $splits[1]
            Write-Host "Variable value: $variable_value"

            If ( (($variable_value -eq $null) -or ($variable_value -eq "")) -and ('${{ parameters.ignore_null_or_empty_values }}' -eq 'True') )
            {
              Write-Host "New value is null and Ignore null values is true - Not setting variable"
            }
            else{
              echo "##vso[task.setvariable variable=$variable_name;isOutput=true]$variable_value"
              Write-Host "Output variable '$variable_name' set to $variable_value"
            }
          }
