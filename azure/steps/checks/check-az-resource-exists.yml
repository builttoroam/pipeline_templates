parameters:
# name - (Optional) - Specify a name if you need to extract output variable values
- name: name
  type: string
  default: ''
# az_service_connection - Required - Azure Pipeline Service Connection to Azure subscription
- name: az_service_connection
  type: string
# resource_type - Required - First parameter of az command (eg az storage would be storage)
- name: resource_type
  type: string
# resource_name - Required - Name parameter of az comment (eg az storage exists -n XYZ the resource name is XYZ)
- name: resource_name
  type: string
# exists_variable - (Optional) - The name of the variable that is created to store whether the file exists or not
- name: exists_variable
  type: string
  default: 'resource_exists'
# invert - (Optional) - Inverts the result
- name: invert
  type: boolean
  default: false
# check_property - (Optional) - Looks at specific property of resource check result (eg for storage account need to look if name is valid)
- name: check_property
  type: string
  default: ''
# throw_on_fail - (Optional) - Throw exception if file is missing
- name: throw_on_fail
  type: boolean
  default: true


steps:
- task: Bash@3
  displayName: 'Parameters'
  condition: and( succeeded(), eq(variables['agent.diagnostic'], 'true') )
  inputs:
    targetType: inline
    script: |
      echo -------------------------------------------------------------
      echo -------------------------------------------------------------
      echo Name: "${{ parameters.name }}"
      echo Azure service connection: "${{ parameters.az_service_connection }}"
      echo Resource type: "${{ parameters.resource_type }}"
      echo Resource name: "${{ parameters.resource_name }}"
      echo Exists variable: "${{ parameters.exists_variable }}"
      echo Invert: "${{ parameters.invert }}"
      echo Check property: "${{ parameters.check_property }}"
      echo Throw on fail: "${{ parameters.throw_on_fail }}"
      echo -------------------------------------------------------------
      echo -------------------------------------------------------------

- task: AzureCLI@2
  ${{ if ne(parameters.name, '') }}:
    name: ${{ parameters.name }}
  displayName: Check to see if resource exists
  inputs:
    azureSubscription: ${{ parameters.az_service_connection }}
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
      $exists_check = az ${{ parameters.resource_type }} -n ${{ parameters.resource_name }} | ConvertFrom-Json
      Write-Host "Resource ${{ parameters.resource_name }} exists - $exists_check"

      $exists = $false;
      if( '${{ parameters.check_property }}' -ne '' )
      {
        Write-Host "Check property ${{ parameters.check_property }}" 
        $exists = $exists_check['${{ parameters.check_property }}']
      }
      else{
        $exists = $exists_check
      }
      Write-Host "Exists $exists" 

      if( '${{ parameters.invert}}' -eq 'True' )
      {
        Write-Host "Inverting exists" 
        $exists = !($exists)
      }

      echo "##vso[task.setvariable variable=${{ parameters.exists_variable }};isOutput=true]$exists"
      Write-Host "Output variable '${{ parameters.exists_variable }}' set to $exists"

      If ( (-Not $exists) -and ('${{ parameters.throw_on_fail }}' -eq 'True')){
        throw "Resource doesn't exist"
      }


          
