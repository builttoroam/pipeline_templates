parameters:
# downloads - Required - Array {name, source_url, target_file_name}
- name: downloads
  type: object
# folder_to_cache - Required - the folder to cache
- name: folder_to_cache
  type: string
# cache_name - Required - the name of the cache (key and restore key)
- name: cache_name
  type: string
# version - (Optional) - version key for invalidating cache
- name: version
  type: string
  default: ''
# cache_hit_variable - (Optional) - version key for invalidating cache
- name: cache_hit_variable
  type: string
  default: 'cache_hit'  
# cache_timeout - (Optional) - specify using format d.hh:mm:ss.ff
- name: cache_timeout
  type: string
  default: ''
# name - (Optional) - Specify a name if you need to extract output variable values or want to use multiple times
- name: name
  type: string
  default: ''
# onStart - (Optional) Steps to be executed before cache is retrieved
- name: onStart
  type: stepList
  default: []
# postCacheRestore - (Optional) Steps to be executed after the cache has been restored but before downloads start
- name: postCacheRestore
  type: stepList
  default: []
# preDownload - (Optional) Steps to be executed before each download starts - Can reference download info using ${{ download.[name,source_url,target_file_name] }}
- name: preDownload
  type: stepList
  default: []
# postDownload - (Optional) Steps to be executed after each download completes. Can reference download info using ${{ download.[name,source_url,target_file_name] }}
- name: postDownload
  type: stepList
  default: []
# onEnd - (Optional) Steps to be executed after all downloads have completed but before cache is saved
- name: onEnd
  type: stepList
  default: []

steps:
- script: |
    echo -------------------------------------------------------------
    echo -------------------------------------------------------------
    echo 'Downloads: ${{ replace(convertToJson(parameters.downloads),'\n','') }}'
    echo Folder to cache: "${{ parameters.folder_to_cache }}"
    echo Cache name: "${{ parameters.cache_name }}"
    echo Version: "${{ parameters.version }}"
    echo Cache hit variable: "${{ parameters.cache_hit_variable }}"
    echo Cache timeout: "${{ parameters.cache_timeout }}"
    echo Name: "${{ parameters.name }}"
    echo -------------------------------------------------------------
    echo -------------------------------------------------------------
  displayName: 'Parameters'
  condition: and( succeeded(), eq(variables['agent.diagnostic'], 'true') )

- ${{ parameters.onStart }}

- task: Cache@2
  inputs:
    ${{ if ne(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} | ${{ parameters.version }}
    ${{ if eq(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} 
    ${{ if ne(parameters.version, '') }}:
      restoreKeys: ${{ parameters.cache_name }} | ${{ parameters.version }}
    ${{ if eq(parameters.version, '') }}:
      restoreKeys: ${{ parameters.cache_name }} 
    path: $(Pipeline.Workspace)/${{ parameters.folder_to_cache }}
    cacheHitVar: ${{ parameters.cache_hit_variable }} 

- script: echo 'Cached'
  condition: and( succeeded(), ne(variables['${{ parameters.cache_hit_variable }}'], 'false'))

- script: echo 'Not cached'
  condition: and( succeeded(), eq(variables['${{ parameters.cache_hit_variable }}'], 'false'))

- ${{ parameters.postCacheRestore }}

- ${{ each download in parameters.downloads }}:
  - ${{ parameters.preDownload }}

  - task: PowerShell@2
    displayName: 'Determine if the download should proceed'
    name: '${{ parameters.name }}${{ download.name }}DownloadCheck'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
          $cachetimestampfile = '$(Pipeline.Workspace)/${{ parameters.folder_to_cache }}/${{ download.target_file_name }}.cache'
          Write-Host "Defining cache timestamp file $cachetimestampfile"
          echo "##vso[task.setvariable variable=cache_timestamp_file;isOutput=true]$cachetimestampfile"

          If ( '$(${{ parameters.cache_hit_variable }})' -ne 'false')
          {
            If ( '${{ parameters.cache_timeout }}' -ne '')
            {
              $file_exists = Test-Path $cachetimestampfile
              Write-Host "Cache timestamp file exists $file_exists"

              If ( -Not $file_exists)
              {
                Write-Host "Cache hit and timeout specified, but no cache timestamp file, so download"
                echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
              }
              else
              {
                $expiry = '${{ parameters.cache_timeout }}' -as [TimeSpan]
                $lastcached = (Get-Content -Path $cachetimestampfile) -as [DateTime]
                $cache_expiry = $lastcached.Add($expiry)
                If ( $cache_expiry -lt (Get-Date) )
                {
                  Write-Host "Cache hit, cache expired, so download"
                  echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
                }
                else
                {
                  Write-Host "Cache hit, cache Not expired, so do Not download"
                  echo "##vso[task.setvariable variable=should_download;isOutput=true]False"
                }
              }
            }
            else
            {
              Write-Host "Cache hit and no timeout specified on cache, so do Not download"
              echo "##vso[task.setvariable variable=should_download;isOutput=true]False"
            }
          }
          else
          {
            Write-Host "Cache miss, so download"
            echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
          }

  - template: download-url-to-file.yml
    parameters:
      name: '${{ parameters.name }}${{ download.name }}DownloadItem'
      source_url: '${{ download.source_url }}'
      target_path: '$(Pipeline.Workspace)\${{ parameters.folder_to_cache }}\${{ download.target_file_name }}' 
      overwrite_existing: $(${{ parameters.name }}${{ download.name }}DownloadCheck.should_download)

  - task: PowerShell@2
    condition: and( succeeded(), eq( variables['${{ parameters.name }}${{ download.name }}DownloadCheck.should_download'] , 'True') )
    displayName: 'Write out the cache timestamp file'
    name: '${{ parameters.name }}${{ download.name }}Timestamp'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
          $cached = Get-Date
          Write-Host "File cached at $cached" 
          $cachetimestampfile = '$(${{ parameters.name }}${{ download.name }}DownloadCheck.cache_timestamp_file)'
          Set-Content -Path $cachetimestampfile -Value $cached
          Write-Host "Cache timestamp file written $cachetimestampfile"
          $downloaded = Get-Date $cached -Format "yyyyMMddHHmmss"
          echo "##vso[task.setvariable variable=downloaded_timestamp;isOutput=true]$downloaded"

  - task: Cache@2
    condition: and( succeeded(), eq( variables['${{ parameters.name }}${{ download.name }}DownloadCheck.should_download'] , 'True') )
    inputs:
      ${{ if ne(parameters.version, '') }}:
        key: ${{ parameters.cache_name }} | ${{ parameters.version }} | "$(${{ parameters.name }}${{ download.name }}Timestamp.downloaded_timestamp)"
      ${{ if eq(parameters.version, '') }}:
        key: ${{ parameters.cache_name }} | "$(${{ parameters.name }}${{ download.name }}Timestamp.downloaded_timestamp)"
      path: $(Pipeline.Workspace)/${{ parameters.folder_to_cache }}

  - ${{ parameters.postDownload }}

- ${{ parameters.onEnd }}


