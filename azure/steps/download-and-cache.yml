parameters:
# source_url - Required - The path to download
- name: source_url
  type: string
# target_file_name - Required - Filename to download to
- name: target_file_name
  type: string
# folder_to_cache - Required - the folder to cache
- name: folder_to_cache
  type: string
# cache_name - Required - the name of the cache (key and restore key)
- name: cache_name
  type: string
# version - (Optional) - version key for invalidating cache
- name: version
  type: string
  default: ''
# cache_hit_variable - (Optional) - version key for invalidating cache
- name: cache_hit_variable
  type: string
  default: 'cache_hit'  
# cache_timeout - (Optional) - specify using format d.hh:mm:ss.ff
- name: cache_timeout
  type: string
  default: ''
# name - (Optional) - Specify a name if you need to extract output variable values or want to use multiple times
- name: name
  type: string
  default: ''


steps:
- task: Cache@2
  inputs:
    ${{ if ne(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} | ${{ parameters.version }}
    ${{ if eq(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} 
    ${{ if ne(parameters.version, '') }}:
      restoreKeys: ${{ parameters.cache_name }} | ${{ parameters.version }}
    ${{ if eq(parameters.version, '') }}:
      restoreKeys: ${{ parameters.cache_name }} 
    path: $(Pipeline.Workspace)/${{ parameters.folder_to_cache }}
    cacheHitVar: ${{ parameters.cache_hit_variable }} 

- script: echo 'Cached'
  condition: eq(variables['${{ parameters.cache_hit_variable }}'], 'true')

- script: echo 'Not cached'
  condition: ne(variables['${{ parameters.cache_hit_variable }}'], 'true')

- task: PowerShell@2
  displayName: 'Determine if the download should proceed'
  name: '${{ parameters.name }}DownloadCheck'
  inputs:
    targetType: 'inline'
    workingDirectory: $(Pipeline.Workspace)
    script: |
        $cachetimestampfile = '$(Pipeline.Workspace)/${{ parameters.folder_to_cache }}/${{ parameters.target_file_name }}.cache'
        Write-Host "Defining cache timestamp file $cachetimestampfile"
        echo "##vso[task.setvariable variable=cache_timestamp_file;isOutput=true]$cachetimestampfile"

        If ( $('${{ parameters.cache_hit_variable }}') -eq 'true')
        {
          If ( ${{ parameters.cache_timeout }} -ne '')
          {
            $file_exists = Test-Path $cachetimestampfile
            Write-Host "Cache timestamp file exists $file_exists"

            If ( -Not $file_exists)
            {
              Write-Host "Cache hit and timeout specified, but no cache timestamp file, so download"
              echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
            }
            else
            {
              $expiry = ${{ parameters.cache_timeout }} -as [TimeSpan]
              $lastcached = (Get-Content -Path $cachetimestampfile) -as [DateTime]
              $cache_expiry = $lastcached.Add($expiry)
              If ( $cache_expiry -lt (Get-Date) )
              {
                Write-Host "Cache hit, cache expired, so download"
                echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
              }
              else
              {
                Write-Host "Cache hit, cache Not expired, so do Not download"
                echo "##vso[task.setvariable variable=should_download;isOutput=true]False"
              }
            }
          }
          else
          {
            Write-Host "Cache hit and no timeout specified on cache, so do Not download"
            echo "##vso[task.setvariable variable=should_download;isOutput=true]False"
          }
        }
        else
        {
          Write-Host "Cache miss, so download"
          echo "##vso[task.setvariable variable=should_download;isOutput=true]True"
        }

- task: PowerShell@2
  displayName: 'Echo'
  inputs:
    targetType: 'inline'
    workingDirectory: $(Pipeline.Workspace)
    script: |
        Write-Host "Should download $(${{ parameters.name }}DownloadCheck.should_download)"


- template: download-url-to-file.yml
  parameters:
    source_url: '${{ parameters.source_url }}'
    target_path: '$(Pipeline.Workspace)/${{ parameters.folder_to_cache }}/${{ parameters.target_file_name }}' 
    overwrite_existing: $(${{ parameters.name }}DownloadCheck.should_download)

- task: PowerShell@2
  condition: eq( variables['${{ parameters.name }}DownloadCheck.should_download'] , 'True') 
  displayName: 'Write out the cache timestamp file'
  name: '${{ parameters.name }}Timestamp'
  inputs:
    targetType: 'inline'
    workingDirectory: $(Pipeline.Workspace)
    script: |
        $cached = Get-Date
        Write-Host "File cached at $cached" 
        $cachetimestampfile = '$(${{ parameters.name }}DownloadCheck.cache_timestamp_file)'
        Set-Content -Path $cachetimestampfile -Value $cached
        Write-Host "Cache timestamp file written $cachetimestampfile"
        $downloaded = Get-Date $cached -Format "yyyyMMddHHmmss"
        echo "##vso[task.setvariable variable=downloaded_timestamp;isOutput=true]$downloaded"

- task: Cache@2
  condition: eq( variables['${{ parameters.name }}DownloadCheck.should_download'] , 'True') 
  inputs:
    ${{ if ne(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} | ${{ parameters.version }} | $(variables['${{ parameters.name }}Timestamp.downloaded_timestamp'])
    ${{ if eq(parameters.version, '') }}:
      key: ${{ parameters.cache_name }} | $( ${{ parameters.name }}Timestamp.downloaded_timestamp )
    path: $(Pipeline.Workspace)/${{ parameters.folder_to_cache }}
