parameters:
# source_url - Required - The path to download
- name: source_url
  type: string
# target_path - (Optional) - Filename and either relative or absolute path
- name: target_path
  type: string
  default: ''
# is_downloaded_variable - (Optional)
- name: is_downloaded_variable
  type: string
  default: 'downloaded'
# file_path_variable - (Optional)
- name: file_path_variable
  type: string
  default: 'downloaded_file_path'
# name - (Optional) - Specify a name if you need to extract output variable values
- name: name
  type: string
  default: ''
# overwrite_existing - (Optional) - Default is to only download file if it doesn't exist
- name: overwrite_existing
  type: string
  default: 'False'


steps:
  - template: /azure/steps/checks/check-filename-for-download.yml
    parameters:
      name: ${{ parameters.name }}CheckDownloadFileName
      source_url: ${{ parameters.source_url }}
      target_path: ${{ parameters.target_path }}
      file_path_variable: 'download_path'

  - template: /azure/steps/checks/check-file-exists.yml
    parameters:
      name: ${{ parameters.name }}CheckFileExists
      path_to_check: $(${{ parameters.name }}CheckDownloadFileName.download_path)
      throw_on_fail: false
      exists_variable: 'file_download_exists'
      full_path_variable: 'file_download_path'

  - task: PowerShell@2
    ${{ if ne(parameters.name, '') }}:
      name: ${{ parameters.name }}
    displayName: 'Download url [${{ parameters.source_url }}] to file [${{ parameters.target_path }}]'
    inputs:
      targetType: 'inline'
      workingDirectory: $(Pipeline.Workspace)
      script: |
          # $file_path = '${{ parameters.target_path }}'
          # Write-Host "Target path $file_path"

          # $path_includes_filename = $true
          # If ( $file_path -ne '')
          # {
          #   $path_includes_filename = (Split-Path -Path $file_path -Leaf).Contains('.')
          # }

          # If ( (-Not $path_includes_filename) -or ($file_path -eq ''))
          # {
          #   $url = '${{ parameters.source_url }}' -as [System.Uri]
          #   $filename = $url.Segments[$urlobj.Segments.length-1]
          #   If ( $filename.Contains('.') )
          #   {
          #     If ( $file_path -eq '')
          #     {
          #       $file_path = $filename
          #     }
          #     else
          #     {
          #       $file_path = Join-Path $file_path $filename
          #     }
          #   }
          #   else
          #   {
          #     throw 'target_path not specified or no filename provide and unable to retrieve filename from source_url'
          #   }
          # }

          # # Check to see if the target path is an absolute or relative path
          # $isAbsolute = Split-Path -Path $file_path -IsAbsolute
          # Write-Host "Is supplied path absolute - $isAbsolute"
          
          # # If not absolute, then need to combine the path with the workspace folder
          # If (!($isAbsolute)){
          #   $file_path = Join-Path $(Pipeline.Workspace) $file_path
          #   Write-Host "Absolute path is $file_path"
          # }

          # $file_dir = Split-Path -Path $file_path
          # Write-Host "Destination directory $file_dir"
          # If (!( Test-Path $file_dir )){
          #   Write-Host "Destination directory doesn't exist, so creating it"
          #   New-Item -Path $file_dir -ItemType Directory  
          # }

          # $file_exists = Test-Path $file_path
          # Write-Host "File exists $file_exists"

          $file_path = $(${{ parameters.name }}CheckFileExists.file_download_path)
          Write-Host "Destination file $file_path"

          $file_exists = $(${{ parameters.name }}CheckFileExists.file_download_exists)
          Write-Host "File exists $file_exists"

          $isDownloaded = $false
          If ( (-not $file_exists) -or ('${{ parameters.overwrite_existing }}' -eq 'True') )
          {
            Write-Host "Download file from ${{ parameters.source_url }} to $file_path"
            $contents = Invoke-WebRequest '${{ parameters.source_url }}' -UseBasicParsing -OutFile $file_path
            Write-Host "Download complete to $file_path"
            $isDownloaded = $true
          }
          else{
            Write-Host "File not downloaded"
          }

          echo "##vso[task.setvariable variable=${{ parameters.is_downloaded_variable }};isOutput=true]$isDownloaded"
          Write-Host "Output variable '${{ parameters.is_downloaded_variable }}' set to $isDownloaded"

          echo "##vso[task.setvariable variable=${{ parameters.file_path_variable }};isOutput=true]$file_path"
          Write-Host "Output variable '${{ parameters.file_path_variable }}' set to $file_path"          
