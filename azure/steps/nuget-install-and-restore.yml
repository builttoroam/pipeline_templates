parameters:
# nuget_version_to_install - (Optional) Use to override the NuGet version (defaults to 4.4.1)
- name: nuget_version_to_install
  type: string
  default: '4.4.1'
# solution_filename - (Required) The relative path to the solution file that should be built
- name: solution_filename
  type: string
# nuget_config_file - (Optional) Path to nuget.config file
- name: nuget_config_file
  type: string
  default: ''
# nuget_cache_enabled - (Optional) Whether nuget packages should be cached (default is false)
- name: nuget_cache_enabled
  type: boolean
  default: false
# nuget_commit_lock_updates - (Optional) Whether changes to package.lock.json files should be committed
- name: nuget_commit_lock_updates
  type: boolean
  default: false
# artifact_folder - (Optional) The name of the folder to copy application to in the artifact
- name: artifact_folder
  type: string
  default: 'PackageLocks'


steps:
  # Select the NuGet version based on the nuget_version_to_install parameter          
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet ${{ parameters.nuget_version_to_install }}'
    inputs:
      versionSpec: '${{ parameters.nuget_version_to_install }}'

  - task: PowerShell@2
    displayName: Find nuget packages folder and set NUGET_PACKAGES
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Finding cache"
        $cache = nuget locals global-packages -l
        Write-Host "Cache: $cache"
        $cacheLocation = $cache.Replace('global-packages: ', '')
        Write-Host "Nuget packages location: $cacheLocation"
        Write-Host "##vso[task.setvariable variable=NUGET_PACKAGES;]$cacheLocation"

  - task: Cache@2
    condition: eq( ${{ parameters.nuget_cache_enabled }}, true)
    displayName: Cache Nuget Packages
    inputs:
      key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
      path: '$(NUGET_PACKAGES)'
      restoreKeys: |
        nuget | "$(Agent.OS)"
        nuget
      cacheHitVar: 'CACHE_RESTORED'

  - script: |
      git rm **/packages.lock.json -f
    displayName: Deleting all package lock files
    condition: and( eq(${{ parameters.nuget_cache_enabled }}, true), ne(variables.CACHE_RESTORED, true))

  # NuGet restore for solution
  - task: NuGetCommand@2
    condition: or( ne(${{ parameters.nuget_cache_enabled }}, true), ne(variables.CACHE_RESTORED, true))
    displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
    inputs:
      ${{ if ne( parameters.nuget_config_file , '') }}:
        feedsToUse: 'config'
      ${{ if ne( parameters.nuget_config_file , '') }}:
        nugetConfigPath: '${{ parameters.nuget_config_file }}'
      restoreSolution: '${{ parameters.solution_filename }}'

  - task: CopyFiles@2
    condition: and( eq(${{ parameters.nuget_cache_enabled }}, true), ne(variables.CACHE_RESTORED, true))
    displayName: Copy packages.lock.json files to staging directory
    inputs:
      contents: '**\*.*packages.lock.json' 
      targetFolder:  '$(Build.ArtifactStagingDirectory)/${{ parameters.artifact_folder }}'

  - script: |
      del packages.lock.json /s /f
      git reset --hard
    displayName: Restore package lock files so the nuget is cached
    condition: and( eq(${{ parameters.nuget_cache_enabled }}, true), ne(variables.CACHE_RESTORED, true))
