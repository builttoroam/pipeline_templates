parameters:
# stage_name - (Optional) The name of the stage, so that it can be referenced elsewhere (eg for dependsOn property). 
# Defaults to 'Build_iOS'
- name: stage_name
  type: string
  default: 'Build_iOS'
# depends_on - (Optional) The array of stages that this stage depends on. Default is that this stage does not depend on 
# any other stage
- name: depends_on
  type: string
  default: ''
# build_ios_enabled - (Optional) Whether this stages should be executed. Note that setting this to false won't completely
# cancel the stage, it will merely skip most of the stages. The stage will appear to complete successfully, so
# any stages that depend on this stage will attempt to execute
- name: build_ios_enabled
  type: boolean
  default: true

# build_number - (Optional) The build number to be applied to the application. Defaults to Build.BuildId 
# built in variable
- name: build_number
  type: string
  default: '$(Build.BuildId)'
# full_version_number - (Optional) The full application version number. Defaults to 1.0.XXX where XXX is the 
# same as the build_number
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'

# solution_filename - (Required) The relative path to the solution file that should be built
- name: solution_filename
  type: string
# solution_build_configuration - (Optional) The build configuration within the solution that should be invoked. 
# Default is Release but can be overwritten if you want to do say a Debug build
- name: solution_build_configuration
  type: string
  default: Release

# ios_plist_filename - (Optional) The Info.plist file that contains the application information such as bundle id
# and version information. If not specified, template will locate the first Info.plist automatically.
- name: ios_plist_filename
  type: string
  default: ''
# ios_cert_securefiles_filename - (Required) The certificate file used to sign the application. This is the name
# of the certificate in Secure Files
- name: ios_cert_securefiles_filename 
  type: string 
# ios_cert_password - (Optional) The password to unlock the certificate so it can be used. This is required
# if the certificate has a password set
- name: ios_cert_password 
  type: string 
  default: ''
# ios_provisioning_profile_securefiles_filename - (Required) The provisioning profile to use when signing the application.
# This is the name of the provisioning profile in Secure Files
- name: ios_provisioning_profile_securefiles_filename 
  type: string 
# ios_signing_identity - (Optional) The signing identity that maps to the signing certificate. If not provided, the template
# will use the value extracted during the certificate installation process.
- name: ios_signing_identity 
  type: string 
  default: ''
# ios_provisioning_profile_id - (Optional) The id of the provisioning profile. If not provided, the template will
# use the value extracted during the installation of the provisioning profile
- name: ios_provisioning_profile_id 
  type: string 
  default: ''

# artifact_name - (Optional) The name of the artifact to copy application to
- name: artifact_name
  type: string
  default: 'drop'
# artifact_folder - (Optional) The name of the folder to copy application to in the artifact
- name: artifact_folder
  type: string
  default: 'iOS'
# application_package - (Optional) The name of the application package to output
- name: application_package
  type: string
  default: 'SignediOS.ipa'

# onStart - (Optional) Steps to be executed before stage starts
- name: onStart
  type: stepList
  default: []
# preBuild - (Optional) Steps to be executed before the build starts
- name: preBuild
  type: stepList
  default: []
# postBuild - (Optional) Steps to be executed after the build has been invoked
- name: postBuild
  type: stepList
  default: []
# prePublish - (Optional) Steps to be executed before application package is published to artifact
- name: prePublish
  type: stepList
  default: []
# onEnd - (Optional) Steps to be executed at the end of the stage
- name: onEnd
  type: stepList
  default: []

# ios_nuget_version - (Optional) Use to override the NuGet version (defaults to 6.0.0)
- name: ios_nuget_version
  type: string
  default: '6.0.0'
# net_core_version - (Optional) Use to override the .NET Core version (defaults to 6.0.x)
- name: net_core_version 
  type: string 
  default: '6.0.x'
# xamarin_sdk_version - (Optional) Use to override the Xamarin SDK version (defaults to 6.12.11)
- name: xamarin_sdk_version
  type: string 
  default: '6_12_11'
# roslyn_override - (Optional) Use to inject an override for Roslyn compiler to fix langversion 10.0 for xamarin ios apps (defaults to true)
- name: roslyn_override
  type: boolean
  default: true



stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  condition: ${{ parameters.build_ios_enabled }}
  variables: 
    - name: manifestPath
      value: ${{ parameters.ios_plist_filename }}
    - name: signing_identity
      value: ${{ parameters.ios_signing_identity }}
    - name: prov_profile
      value: ${{ parameters.ios_provisioning_profile_id }}
    - name: bundle_id
      value: ''
      
  pool:
    vmImage: 'macos-latest'

  jobs:
  - job: BuildiOS

    steps:
    # Download and install the ios signing certifcate from secure files
    # with the name specified in parameter ios_cert_securefiles_filename
    - task: InstallAppleCertificate@2
      displayName: 'Install Signing Certificate'
      inputs:
        certSecureFile: '${{ parameters.ios_cert_securefiles_filename }}'
        certPwd: '${{ parameters.ios_cert_password }}'
        keychain: 'temp'
        deleteCert: true  

    # Download and install the provisioning profile from secure files
    # with the name specified in the parameter ios_provisioning_profile_securefiles_filename
    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install Provisioning Profile'
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: '${{ parameters.ios_provisioning_profile_securefiles_filename }}'
        removeProfile: true

    # Download the provisioning profile from secure files with the name
    # specified in the parameter ios_provisioning_profile_securefiles_filename
    # The script needs to do this because the previous task deletes the profile
    # after its done installing it  
    - task: DownloadSecureFile@1
      displayName: 'Download secure file ${{ parameters.ios_provisioning_profile_securefiles_filename }}'
      name: provision_profile_file
      inputs:
        secureFile: '${{ parameters.ios_provisioning_profile_securefiles_filename }}'
  
    # onStart steps - performed after any secure files are downloaded but before 
    # any other build steps are executed
    - ${{ parameters.onStart }}

    # If the bundle_id variable hasn't been set, then extract it from within 
    # the provisioning profile. This is very hacky as we're not really decoding
    # the provisioning profile using CMS; instead we're just opening as text
    # and searching for the correct key-value pair
    - task: PowerShell@2
      displayName: 'Extract bundle id from provisioning profile'
      condition: and( succeeded(), eq( variables['bundle_id'], '') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Loading content"
          $content = Get-Content $(provision_profile_file.secureFilePath) -Raw
          Write-Host "Content loaded"
          $pattern = '<key>.*<\/key>\s*<string>.*<\/string>'
          Write-Host "Pattern: $pattern"
          $valuepattern = '<string>(.*)<\/string>'
          Write-Host "Value Pattern: $valuepattern"
          $matches = $content | Select-String $pattern -AllMatches
          Write-Host "Matches: $matches.Matches"
          $idkvp = ($matches.Matches | Where-Object {$_.Value.contains('application-identifier')}).Value
          Write-Host "ID key value pair: $idkvp"
          $idmatch = $idkvp | Select-String $valuepattern
          Write-Host "ID match: $idmatch"
          $id = $idmatch.Matches[0].Groups[1].Value
          Write-Host "ID: $id"
          $teamkvp = ($matches.Matches | Where-Object {$_.Value.contains('com.apple.developer.team-identifier')}).Value
          Write-Host "Team key value pair: $teamkvp"
          $teammatch = $teamkvp | Select-String $valuepattern
          Write-Host "Team match: $teammatch"
          $teamid = $teammatch.Matches[0].Groups[1].Value
          Write-Host "Team id: $teamid"
          $bundleid = $id.Replace($teamid + ".","")
          Write-Host "Bundle id : $bundleid"
          Write-Host "##vso[task.setvariable variable=bundle_id]$bundleid"

    # If the ios_plist_filename parameter hasn't been specified then just search for working directory
    # for Info.plist file. If you have multiple iOS projects you need to specify the ios_plist_filename 
    # property otherwise this script will always pick the first Info.plist it finds
    - task: PowerShell@2
      displayName: 'Find the Info.plist file'
      condition: and( succeeded(), eq( variables['manifestPath'], '') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Finding Package Plist (ie Info.plist). Set ios_plist_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "Info.plist" -Path "$(System.DefaultWorkingDirectory)"  -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "##vso[task.setvariable variable=manifestPath]$manifest"

    # Update the Info.plist with the verion information
    - task: ios-bundle-version@1
      displayName: 'Setting application version in ${{ parameters.ios_plist_filename }}'
      inputs:
        sourcePath: '$(manifestPath)'
        versionCodeOption: 'buildid'
        versionCode: '${{ parameters.build_number }}'
        versionName: '${{ parameters.full_version_number }}' 
        printFile: true

    # Update the Info.plist with the correct bundle id
    - task: ios-bundle-identifier@1
      displayName: 'Setting application bundle id ${{ parameters.ios_plist_filename }}'
      condition: and( succeeded(), ne( variables['bundle_id'], '') )
      inputs:
        sourcePath: '$(manifestPath)'
        bundleIdentifier: '$(bundle_id)'
        printFile: true
 
    # This task is linked to the InstallAppleCertificate task at the begining of this template
    # As part of the InstallAppleCertificate the APPLE_CERTIFICATE_SIGNING_IDENTITY environment
    # variable is set to the signing identity found in the certificate file
    - task: PowerShell@2
      displayName: 'Extract signing identity'
      condition: and( succeeded(), eq( variables['signing_identity'], '') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Extracting certificate CN $env:APPLE_CERTIFICATE_SIGNING_IDENTITY"
          $cn = $env:APPLE_CERTIFICATE_SIGNING_IDENTITY
          Write-Host "Signing Identity: $cn"
          Write-Host "##vso[task.setvariable variable=signing_identity]$cn"

    # This task is linked to the InstallAppleProvisioningProfile task at the begining of this template
    # As part of the InstallAppleProvisioningProfile the APPLE_PROV_PROFILE_UUID environment
    # variable is set to the provisioning profile id found in the provisioning profile file
    - task: PowerShell@2
      displayName: 'Extract provisioning profile id'
      condition: and( succeeded(), eq( variables['prov_profile'], '') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Extracting profile id $env:APPLE_PROV_PROFILE_UUID"
          $cn = $env:APPLE_PROV_PROFILE_UUID
          Write-Host "Provisioning Profile: $cn"
          Write-Host "##vso[task.setvariable variable=prov_profile]$cn"

    # Select the Xamarin SDK version based on the xamarin_sdk_version parameter          
    - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh '${{ parameters.xamarin_sdk_version }}'
      displayName: 'Select the Xamarin SDK version'

    # Select the .Net Core version based on the net_core_version parameter          
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk ${{ parameters.net_core_version }}'
      inputs:
        version: '${{ parameters.net_core_version }}'

    # Check for solution filter - if filter, need to extract actual solution file
    - task: PowerShell@2
      displayName: 'Determine Solution File for ${{ parameters.solution_filename }}'
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          if( '${{ parameters.solution_filename }}'.contains(".slnf") ) {
              Write-Host "File specified is solution filter"
              $actualSolutionFile = (Get-Content -Path '${{ parameters.solution_filename }}' -RAW | ConvertFrom-Json).solution.path
              Write-Host "Solution relative path is $actualSolutionFile"
              $filterPath = (get-item '${{ parameters.solution_filename }}').directory.fullname 
              Write-Host "Filter path is $filterPath"
              $solutionFile = "$filterPath/$actualSolutionFile"
              Write-Host "Full path to solution file is $solutionFile"
              Write-Host "##vso[task.setvariable variable=solutionFilename]$solutionFile"
          }
          else{
              Write-Host "File specified is a solution file"
              $solutionFile = "${{ parameters.solution_filename }}"
              Write-Host "Full path to solution file is $solutionFile"
              Write-Host "##vso[task.setvariable variable=solutionFilename]$solutionFile"
          }

    # Add Roslyn Override to allow for LangVersion 10.0
    - task: PowerShell@2
      displayName: 'Add Roslyn Override to allow for LangVersion 10.0'
      condition: and( succeeded(), eq( '${{ parameters.roslyn_override }}', 'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          $solutionFolder = (Get-Item '${{ parameters.solution_filename }}').directory.fullname 
          Write-Host "Folder is $solutionFolder"
          $targets_path = "$solutionFolder/Directory.Build.targets" # "C:\source\github\builttoroam\pipeline_templates\src\apps\dotnet\xamarin\XamarinApps\Directory.Build.targets"
          $overrides_path = "$solutionFolder/roslyn-override.targets" #"C:\source\github\builttoroam\pipeline_templates\src\apps\dotnet\xamarin\XamarinApps\roslyn-override.targets"
          # $targets_path = "Directory.Build.targets"
          $xml = New-Object -TypeName XML
          if (Test-Path -Path $targets_path -PathType Leaf)
          {
              Write-Host "Directory targets exists so loading existing xml"
              $xml.Load($targets_path)
          }
          else
          {
              Write-Host "Directory targets doesn't exist, so creating new xml document"
          $projectxml=@"
          <Project ToolsVersion="15.0">
          </Project>
          "@
              $xml.LoadXml($projectxml)
          }
          [xml]$overridesxml=@"
          <Project ToolsVersion="15.0">
          <PropertyGroup>
              <!--
              macOS needs an explicit override of the current compiler when running under mono.
              On other targets, .NET 6.0's compiler takes precedence.
              -->
              <MicrosoftNetCompilerVersionOverride Condition="'$('$(MSBuildRuntimeType)')'!='Core' and ($('$([MSBuild]::IsOSPlatform(''OSX''))') or '$('$(MSBuildVersion)')' &lt; '17.0')">4.0.1</MicrosoftNetCompilerVersionOverride>
            </PropertyGroup>
            
              <!-- Import the override as the nuget tooling in VS is skipping ItemGroup conditions for legacy projects -->
            <Import Project="roslyn-override.targets" Condition="'$('$(MicrosoftNetCompilerVersionOverride)')'!=''"/>
          </Project>
          "@
          $override = Select-XML -Xml $xml -XPath '//Project/PropertyGroup/MicrosoftNetCompilerVersionOverride'
          if($override -eq $null)
          {
              Write-Host "Appending PropertyGroup"
              $xml.Project.AppendChild($xml.ImportNode($overridesxml.Project.PropertyGroup, $true));
          }
          $import = Select-XML -Xml $xml -XPath '//Project/Import[@Project="roslyn-override.targets"]'
          if($import -eq $null)
          {
              Write-Host "Appending Import"
              $xml.Project.AppendChild($xml.ImportNode($overridesxml.Project.Import, $true));
          }
          $xml.Save($targets_path)
          Write-Host $xml.OuterXML
          [xml]$roslynoverridesxml=@"
          <Project ToolsVersion="15.0">
            <!--
            This file is imported from Directory.Build.props as the nuget tooling
            in VS is skipping ItemGroup conditions for legacy projects (iOS, Android, ...).
            -->
            <Choose>
                <When Condition="'$('$(MicrosoftNetCompilerVersionOverride)')'!=''">
                  <PropertyGroup>
                    <!--
                    Disable shared compilation for the override to take place
                    https://github.com/dotnet/roslyn/blob/315c2e149ba7889b0937d872274c33fcbfe9af5f/src/NuGet/Microsoft.Net.Compilers/build/Microsoft.Net.Compilers.props#L36
                    -->
                    <UseSharedCompilation>false</UseSharedCompilation>
                  </PropertyGroup>
                  <ItemGroup>
                    <!--This override is used to validate the user of specific version of the C# Compiler-->
                    <PackageReference Include="Microsoft.Net.Compilers" Version="$('$(MicrosoftNetCompilerVersionOverride)')">
                      <PrivateAssets>all</PrivateAssets>
                      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
                    </PackageReference>
                  </ItemGroup>
                </When>
            </Choose>
          </Project>
          "@
          $roslynoverridesxml.Save($overrides_path)

    # Install and Restore NuGet for the solution
    - template: ../steps/nuget-install-and-restore.yml
      parameters:
        nuget_version_to_install: '${{ parameters.ios_nuget_version }}'
        solution_filename: '$(solutionFilename)'
                  
    # preBuild steps - performs steps prior to executing the solution build
    - ${{ parameters.preBuild }}

    # Build the solution
    - task: XamariniOS@2
      displayName: 'Building solution ${{ parameters.solution_filename }}'
      inputs:
        solutionFile: '${{ parameters.solution_filename }}'
        configuration: '${{ parameters.solution_build_configuration }}'
        buildForSimulator: false
        packageApp: true
        signingIdentity: '$(signing_identity)'
        signingProvisioningProfileID: '$(prov_profile)'

    # postBuild steps - performs steps immediately after executing the solution build
    - ${{ parameters.postBuild }}

    # Copy artifacts to the correct directory in the staging folder. It uses flattenFolders
    # so there is a risk that multiple artifacts could overwrite each other if they
    # have the same filename
    - task: CopyFiles@2
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        contents: '**/*.ipa'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    # Rename the application package to the name specified in the application_package parameter
    - task: PowerShell@2
      displayName: 'Rename application package'
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Get-ChildItem -Filter "*.ipa" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host

    # prePublish steps - performs steps prior to publishing all artifacts from the staging directory
    - ${{ parameters.prePublish }}

    # Publish artifacts from this stage
    - task: PublishBuildArtifacts@1
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: Container

    # onEnd steps - performs steps after publishing artifacts, at the end of the build stage
    - ${{ parameters.onEnd }}




