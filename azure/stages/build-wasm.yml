parameters:
# stage_name - (Optional) The name of the stage, so that it can be referenced elsewhere (eg for dependsOn property). 
# Defaults to 'Build_Wasm'
- name: stage_name
  type: string
  default: 'Build_Wasm'
# depends_on - (Optional) The array of stages that this stage depends on. Default is that this stage does not depend on 
# any other stage
- name: depends_on
  type: string
  default: ''
# vm_image - (Optional) The name of the vm image to use for execution. Defaults to ubuntu-latest
- name: vm_image
  type: string
  default: 'ubuntu-latest'
# build_wasm_enabled - (Optional) Whether this stages should be executed. Note that setting this to false won't completely
# cancel the stage, it will merely skip most of the steps. The stage will appear to complete successfully, so
# any stages that depend on this stage will attempt to execute
- name: build_wasm_enabled
  type: boolean
  default: true

# build_number - (Optional) The build number to be applied to the application. Defaults to Build.BuildId 
# built in variable
- name: build_number
  type: string
  default: '$(Build.BuildId)'
# full_version_number - (Optional) The full application version number. Defaults to 1.0.XXX where XXX is the 
# same as the build_number
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'

# project_filename - (Required) The relative path to the project file that should be built
- name: project_filename
  type: string
# project_build_configuration - (Optional) The build configuration within the project that should be invoked. 
# Default is Release but can be overwritten if you want to do say a Debug build
- name: project_build_configuration
  type: string
  default: Release

# artifact_name - (Optional) The name of the artifact to copy application to
- name: artifact_name
  type: string
  default: 'drop'
# artifact_folder - (Optional) The name of the folder to copy application to in the artifact
- name: artifact_folder
  type: string
  default: 'Wasm'

# onStart - (Optional) Steps to be executed before stage starts
- name: onStart
  type: stepList
  default: []
# preBuild - (Optional) Steps to be executed before the build starts
- name: preBuild
  type: stepList
  default: []
# postBuild - (Optional) Steps to be executed after the build has been invoked
- name: postBuild
  type: stepList
  default: []
# prePublish - (Optional) Steps to be executed before application package is published to artifact
- name: prePublish
  type: stepList
  default: []
# onEnd - (Optional) Steps to be executed at the end of the stage
- name: onEnd
  type: stepList
  default: []

# net_core_version - (Optional) Use to override the .NET Core version (defaults to 6.0.x)
- name: net_core_version 
  type: string 
  default: '6.0.x'

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  condition: ${{ parameters.build_wasm_enabled }}
  # variables: 
  #   - name: 
  #     value: 

  pool:
    vmImage: '${{ parameters.vm_image }}'

  jobs:
  - job: BuildWasm
    steps:
    - checkout: self
      clean: 'true'
    
    # onStart steps - performed after any secure files are downloaded but before 
    # any other build steps are executed
    - ${{ parameters.onStart }}

    # Select the .Net Core version based on the net_core_version parameter          
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk ${{ parameters.net_core_version }}'
      inputs:
        version: '${{ parameters.net_core_version }}'

    # Install Ninja build
    - script: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
      displayName: Install Ninja build

    # preBuild steps - performs steps prior to executing the build
    - ${{ parameters.preBuild }}

    # Build the project
    - script: |
        dotnet build '${{ parameters.project_filename }}' /p:Configuration='${{ parameters.project_build_configuration }}' /p:GeneratePackageOnBuild=false /detailedsummary 

    # Find the dist folder
    - task: PowerShell@2
      displayName: 'Determine distribution folder for ${{ parameters.project_filename }}'
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          $projectPath = (get-item '${{ parameters.project_filename }}').directory.fullname 
          Write-Host "Project path is $projectPath"
          $dir = Get-ChildItem $projectPath -recurse -Filter "dist" -Directory -ErrorAction SilentlyContinue
          Write-Host "Dist path is $dir"
          Write-Host "##vso[task.setvariable variable=wasmDistFolder]$dir"


    # postBuild steps - performs steps immediately after executing the build
    - ${{ parameters.postBuild }}

    # Copy artifacts to the correct directory in the staging folder. It uses flattenFolders
    # so there is a risk that multiple artifacts could overwrite each other if they
    # have the same filename
    - task: CopyFiles@2
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        SourceFolder: '$(wasmDistFolder)'
        Contents: '**/*.*'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: false
        overWrite: true

    # prePublish steps - performs steps prior to publishing all artifacts from the staging directory
    - ${{ parameters.prePublish }}

    # Publish artifacts from this stage
    - task: PublishBuildArtifacts@1
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: Container

    - task: AzureStaticWebApp@0
      inputs:
        app_location: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        api_location: ''
        output_location: ''
        azure_static_web_apps_api_token: $(wasm_deployment_token)

    # onEnd steps - performs steps after publishing artifacts, at the end of the build stage
    - ${{ parameters.onEnd }}
