parameters:
# stage_name - (Optional) The name of the stage, so that it can be referenced elsewhere (eg for dependsOn property). 
# Defaults to 'Build_Android'
- name: stage_name
  type: string
  default: 'Build_Android'
# depends_on - (Optional) The array of stages that this stage depends on. Default is that this stage does not depend on 
# any other stage
- name: depends_on
  type: stageList
  default: []
# build_android_enabled - (Optional) Whether this stages should be executed. Note that setting this to false won't completely
# cancel the stage, it will merely skip most of the stages. The stage will appear to complete successfully, so
# any stages that depend on this stage will attempt to execute
- name: build_android_enabled
  type: string
  default: 'true'

# build_number - (Optional) The build number to be applied to the application. Defaults to Build.BuildId 
# built in variable
- name: build_number
  type: string
  default: '$(Build.BuildId)'
# full_version_number - (Optional) The full application version number. Defaults to 1.0.XXX where XXX is the 
# same as the build_number
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'

# solution_filename - (Required) The relative path to the solution file that should be built
- name: solution_filename
  type: string
# solution_build_configuration - (Optional) The build configuration within the solution that should be invoked. 
# Default is Release but can be overwritten if you want to do say a Debug build
- name: solution_build_configuration
  type: string
  default: Release
# solution_target_platform - (Optional) The target platform that the solution build will use. 
# Defaults to Any CPU
- name: solution_target_platform
  type: string
  default: 'Any CPU'

# android_manifest_filename - (Optional) The relative path to the AndroidManifest.xml file
# that defines the application manifest. If not specified, template will search for AndroidManifest.xml file
- name: android_manifest_filename
  type: string
  default: ''
# secure_file_keystore_filename - (Required) The keystore file used to sign the application. This is the name
# of the keystore in Secure Files
- name: secure_file_keystore_filename
  type: string
# keystore_alias - (Required) The alias of the keystore. 
- name: keystore_alias
  type: string
# keystore_password - (Required) The password to access the keystore
- name: keystore_password
  type: string

# artifact_name - (Optional) The name of the artifact to copy application to
- name: artifact_name
  type: string
  default: 'drop'
# artifact_folder - (Optional) The name of the folder to copy application to in the artifact
- name: artifact_folder
  type: string
  default: 'Android'
# application_package - (Optional) The name of the application package to output
- name: application_package
  type: string
  default: 'SignedAndroid.aab'

# onStart - Steps to be executed before stage starts
- name: onStart
  type: stepList
  default: []
# preBuild - Steps to be executed before the build starts
- name: preBuild
  type: stepList
  default: []
# postBuild - Steps to be executed after the build has been invoked
- name: postBuild
  type: stepList
  default: []
# prePublish - Steps to be executed before application package is published to artifact
- name: prePublish
  type: stepList
  default: []
# onEnd - Steps to be executed at the end of the stage
- name: onEnd
  type: stepList
  default: []

# nuget_version - (Optional) Use to override the NuGet version (defaults to 4.4.1)
- name: nuget_version
  type: string
  default: '4.4.1'
# net_core_version - (Optional) Use to override the .NET Core version (defaults to 3.0.x)
- name: net_core_version 
  type: string 
  default: '3.0.x'

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  variables: 
    - name: build_enabled
      value: ${{ parameters.build_android_enabled }}
    - name: ANDROID_NDK_HOME
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: ANDROID_NDK_PATH
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: AndroidNdkDirectory
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: manifestPath
      value: ${{ parameters.android_manifest_filename }}
    - name: outputSearch
      value: ''

  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: BuildAndroid
    steps:
    - task: DownloadSecureFile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Download secure file'
      name: signing_keystore
      inputs:
        secureFile: '${{ parameters.secure_file_keystore_filename }}'

    # onStart steps - performed after any secure files are downloaded but before 
    # any other build steps are executed
    - ${{ parameters.onStart }}

    - task: PowerShell@2
      condition: and( eq( variables['manifestPath'], ''), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Finding Package Manifest (ie AndroidManifest.xml). Set android_manifest_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "AndroidManifest.xml" -Path "$(System.DefaultWorkingDirectory)" -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "##vso[task.setvariable variable=manifestPath]$manifest"

    - task: android-manifest-version@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        sourcePath: '$(manifestPath)'
        versionCodeOption: 'buildid'
        versionCode: '${{ parameters.build_number }}'
        versionName: '${{ parameters.full_version_number }}' 
        printFile: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Determining what output format the build will generate"
          if( '${{ parameters.application_package }}'.contains(".aab") )
          { 
            $search = "**/*-Signed.aab"
            $format = "aab"
          }
          else {
            $search = "**/*-Signed.apk"
            $format = "apk"
          }
          Write-Host "Search for output using $search"
          Write-Host "##vso[task.setvariable variable=outputSearch]$search"
          Write-Host "Package format $format"
          Write-Host "##vso[task.setvariable variable=packageFormat]$format"

    - task: NuGetToolInstaller@0
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use NuGet ${{ parameters.nuget_version }}'
      inputs:
        versionSpec: '${{ parameters.nuget_version }}'

    - task: NuGetCommand@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
      inputs:
        restoreSolution: '${{ parameters.solution_filename }}'

    # preBuild steps - performs steps prior to executing the solution build
    - ${{ parameters.preBuild }}

    - task: VSBuild@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Build solution ${{ parameters.solution_filename }}'
      inputs:
        solution: '${{ parameters.solution_filename }}'
        configuration: '${{ parameters.solution_build_configuration }}'
        msbuildArgs: '/p:platform="${{ parameters.solution_target_platform }}" 
        /p:AndroidBuildApplicationPackage="true" 
        /p:AndroidPackageFormat="$(packageFormat)"
        /p:AndroidKeyStore="True" 
        /p:AndroidSigningKeyStore="$(signing_keystore.secureFilePath)"
        /p:AndroidSigningKeyPass="${{ parameters.keystore_password }}" 
        /p:AndroidSigningKeyAlias="${{ parameters.keystore_alias }}" 
        /p:AndroidSigningStorePass="${{ parameters.keystore_password }}"' 

    # postBuild steps - performs steps immediately after executing the solution build
    - ${{ parameters.postBuild }}

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        contents: '$(outputSearch)'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          if( '${{ parameters.application_package }}'.contains(".aab") ) {
            Get-ChildItem -Filter "*.aab" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host
          }
          else{
            Get-ChildItem -Filter "*.apk" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host
          }

    # prePublish steps - performs steps prior to publishing all artifacts from the staging directory
    - ${{ parameters.prePublish }}

    # Publish artifacts from this stage
    - task: PublishBuildArtifacts@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: Container

    # onEnd steps - performs steps after publishing artifacts, at the end of the build stage
    - ${{ parameters.onEnd }}
