parameters:
- name: stage_name
  type: string
  default: 'Android'
- name: depends_on
  default: []
- name: build_android_enabled
  type: string
  default: 'true'
- name: solution_filename
  type: string
- name: solution_build_configuration
  type: string
  default: Release
- name: build_platform
  type: string
  default: 'Any CPU'
- name: android_manifest_filename
  type: string
  default: ''
- name: build_number
  type: string
  default: '$(Build.BuildId)'
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'
- name: secure_file_keystore_filename
  type: string
- name: keystore_alias
  type: string
- name: keystore_password
  type: string
- name: nuget_version
  type: string
  default: '4.4.1'
- name: net_core_version 
  type: string 
  default: '3.0.x'
- name: artifact_name
  type: string
  default: 'drop'
- name: artifact_folder
  type: string
  default: 'Android'
- name: application_package
  type: string
  default: 'SignedAndroid.aab'
- name: onStart
  type: stepList
  default: []
- name: preBuild
  type: stepList
  default: []
- name: postBuild
  type: stepList
  default: []
- name: prePublish
  type: stepList
  default: []
- name: onEnd
  type: stepList
  default: []

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  variables: 
    - name: build_enabled
      value: ${{ parameters.build_android_enabled }}
    - name: ANDROID_NDK_HOME
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: ANDROID_NDK_PATH
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: AndroidNdkDirectory
      value: C:\Microsoft\AndroidNDK64\android-ndk-r16b
    - name: manifestPath
      value: ${{ parameters.android_manifest_filename }}

  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: BuildAndroid
    steps:
    - task: DownloadSecureFile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Download secure file'
      name: signing_keystore
      inputs:
        secureFile: '${{ parameters.secure_file_keystore_filename }}'

    - ${{ parameters.onStart }}

    - task: PowerShell@2
      condition: and( eq( variables['manifestPath'], ''), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Finding Package Manifest (ie AndroidManifest.xml). Set android_manifest_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "AndroidManifest.xml" -Path "$(System.DefaultWorkingDirectory)" -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "##vso[task.setvariable variable=manifestPath]$manifest"

    - task: android-manifest-version@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        sourcePath: '$(manifestPath)'
        versionCodeOption: 'buildid'
        versionCode: '${{ parameters.build_number }}'
        versionName: '${{ parameters.full_version_number }}' 
        printFile: true
          
    - task: NuGetToolInstaller@0
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use NuGet ${{ parameters.nuget_version }}'
      inputs:
        versionSpec: '${{ parameters.nuget_version }}'

    - task: NuGetCommand@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
      inputs:
        restoreSolution: '${{ parameters.solution_filename }}'

    - ${{ parameters.preBuild }}

    - task: VSBuild@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Build solution ${{ parameters.solution_filename }}'
      inputs:
        solution: '${{ parameters.solution_filename }}'
        configuration: '${{ parameters.solution_build_configuration }}'
        msbuildArgs: '/p:platform="${{ parameters.build_platform }}" 
        /p:AndroidBuildApplicationPackage="true" 
        /p:AndroidPackageFormat="aab"
        /p:AndroidKeyStore="True" 
        /p:AndroidSigningKeyStore="$(signing_keystore.secureFilePath)"
        /p:AndroidSigningKeyPass="${{ parameters.keystore_password }}" 
        /p:AndroidSigningKeyAlias="${{ parameters.keystore_alias }}" 
        /p:AndroidSigningStorePass="${{ parameters.keystore_password }}"' 

    - ${{ parameters.postBuild }}

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        contents: '**/*-Signed.aab'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Get-ChildItem -Filter "*.aab" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host

    - ${{ parameters.prePublish }}

    - task: PublishPipelineArtifact@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        targetPath: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}'

    - ${{ parameters.onEnd }}
