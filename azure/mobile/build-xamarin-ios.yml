parameters:
- name: build_ios
  type: string
  default: 'true'
- name: solution_filename
  type: string
- name: solution_build_configuration
  type: string
  default: Release
- name: ios_plist_filename
  type: string
- name: ios_cert_securefiles_filename 
  type: string 
  default: ''
- name: ios_cert_password 
  type: string 
  default: ''
- name: ios_provisioning_profile_securefiles_filename 
  type: string 
  default: ''
- name: ios_signing_identity 
  type: string 
  default: ''
- name: ios_provisioning_profile_id 
  type: string 
  default: ''
- name: build_number
  type: string
  default: '$(Build.BuildId)'
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'
- name: nuget_version
  type: string
  default: '4.4.1'
- name: net_core_version 
  type: string 
  default: '3.0.x'
- name: xamarin_sdk_version
  type: string 
  default: '6_4_0'
- name: artifact_name
  type: string
  default: 'drop'
- name: artifact_folder
  type: string
  default: 'iOS'
- name: ios_ipa_name
  type: string
  default: 'SignediOS.ipa'
- name: onStart
  type: stepList
  default: []
- name: preBuild
  type: stepList
  default: []
- name: postBuild
  type: stepList
  default: []
- name: prePublish
  type: stepList
  default: []
- name: onEnd
  type: stepList
  default: []

stages:
- stage: iOS
  dependsOn: [] 
  variables: 
    - name: build_enabled
      value: ${{ parameters.build_ios }}

  pool:
    vmImage: 'macos-latest'

  jobs:
  - job: BuildiOS

    steps:

    - ${{ parameters.onStart }}

    - task: InstallAppleCertificate@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Install Signing Certificate'
      inputs:
        certSecureFile: '${{ parameters.ios_cert_securefiles_filename }}'
        certPwd: '${{ parameters.ios_cert_password }}'
        keychain: 'temp'
        deleteCert: true  

    - task: InstallAppleProvisioningProfile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Install Provisioning Profile'
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: '${{ parameters.ios_provisioning_profile_securefiles_filename }}'
        removeProfile: true

    - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh '${{ parameters.xamarin_sdk_version }}'
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Select the Xamarin SDK version'

    - task: UseDotNet@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use .Net Core sdk ${{ parameters.net_core_version }}'
      inputs:
        version: '${{ parameters.net_core_version }}'

    - task: NuGetToolInstaller@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use NuGet ${{ parameters.nuget_version }}'
      inputs:
        versionSpec: '${{ parameters.nuget_version }}'

    - task: NuGetCommand@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
      inputs:
        restoreSolution: '${{ parameters.solution_filename }}'

    - task: ios-bundle-version@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Setting application version in ${{ parameters.ios_plist_filename }}'
      inputs:
        sourcePath: '${{ parameters.ios_plist_filename }}'
        versionCodeOption: 'buildid'
        versionCode: '${{ parameters.build_number }}'
        versionName: '${{ parameters.full_version_number }}' 
        printFile: true

    - ${{ parameters.preBuild }}

    - task: XamariniOS@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Building solution ${{ parameters.solution_filename }}'
      inputs:
        solutionFile: '${{ parameters.solution_filename }}'
        configuration: '${{ parameters.solution_build_configuration }}'
        buildForSimulator: false
        packageApp: true
        signingIdentity: '${{ parameters.ios_signing_identity }}'
        signingProvisioningProfileID: '${{ parameters.ios_provisioning_profile_id }}'

    - ${{ parameters.postBuild }}

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        contents: '**/*.ipa'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Get-ChildItem -Filter "*.ipa" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}" | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.ios_ipa_name }}" | Write-Host

    - ${{ parameters.prePublish }}

    - task: PublishBuildArtifacts@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: 'Container'

    - ${{ parameters.onEnd }}




