parameters:
- name: stage_name
  type: string
  default: 'iOS'
- name: build_ios
  type: string
  default: 'true'
- name: solution_filename
  type: string
- name: solution_build_configuration
  type: string
  default: Release
- name: ios_plist_filename
  type: string
  default: ''
- name: ios_cert_securefiles_filename 
  type: string 
  default: ''
- name: ios_cert_password 
  type: string 
  default: ''
- name: ios_provisioning_profile_securefiles_filename 
  type: string 
  default: ''
- name: ios_signing_identity 
  type: string 
  default: ''
- name: ios_provisioning_profile_id 
  type: string 
  default: ''
- name: build_number
  type: string
  default: '$(Build.BuildId)'
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'
- name: nuget_version
  type: string
  default: '4.4.1'
- name: net_core_version 
  type: string 
  default: '3.0.x'
- name: xamarin_sdk_version
  type: string 
  default: '6_4_0'
- name: artifact_name
  type: string
  default: 'drop'
- name: artifact_folder
  type: string
  default: 'iOS'
- name: application_package
  type: string
  default: 'SignediOS.ipa'
- name: onStart
  type: stepList
  default: []
- name: preBuild
  type: stepList
  default: []
- name: postBuild
  type: stepList
  default: []
- name: prePublish
  type: stepList
  default: []
- name: onEnd
  type: stepList
  default: []

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: [] 
  variables: 
    - name: build_enabled
      value: ${{ parameters.build_ios }}
    - name: manifestPath
      value: ${{ parameters.ios_plist_filename }}
    - name: signing_identity
      value: ${{ parameters.ios_signing_identity }}
    - name: prov_profile
      value: ${{ parameters.ios_provisioning_profile_id }}
    - name: bundle_id
      value: ''
      
  pool:
    vmImage: 'macos-latest'

  jobs:
  - job: BuildiOS

    steps:
    - task: DownloadSecureFile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Download secure file'
      name: secure_cert
      inputs:
        secureFile: '${{ parameters.ios_cert_securefiles_filename }}'

    - task: InstallAppleCertificate@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Install Signing Certificate'
      inputs:
        certSecureFile: '${{ parameters.ios_cert_securefiles_filename }}'
        certPwd: '${{ parameters.ios_cert_password }}'
        keychain: 'temp'
        deleteCert: true  

    - task: InstallAppleProvisioningProfile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Install Provisioning Profile'
      inputs:
        provisioningProfileLocation: 'secureFiles'
        provProfileSecureFile: '${{ parameters.ios_provisioning_profile_securefiles_filename }}'
        removeProfile: true
  
    - task: DownloadSecureFile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Download secure file'
      name: provision_profile_file
      inputs:
        secureFile: '${{ parameters.ios_provisioning_profile_securefiles_filename }}'
  
    - ${{ parameters.onStart }}

    - task: PowerShell@2
      condition: and( succeeded(), and( eq( variables['bundle_id'], ''), eq( variables['build_enabled'],'true') ) )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Loading content"
          $content = Get-Content $(provision_profile_file.secureFilePath) -Raw
          Write-Host "Content loaded"
          $pattern = '<key>.*<\/key>\s*<string>.*<\/string>'
          Write-Host "Pattern: $pattern"
          $valuepattern = '<string>(.*)<\/string>'
          Write-Host "Value Pattern: $valuepattern"
          $matches = $content | Select-String $pattern -AllMatches
          Write-Host "Matches: $matches.Matches"
          $idkvp = ($matches.Matches | Where-Object {$_.Value.contains('application-identifier')}).Value
          Write-Host "ID key value pair: $idkvp"
          $idmatch = $idkvp | Select-String $valuepattern
          Write-Host "ID match: $idmatch"
          $id = $idmatch.Matches[0].Groups[1].Value
          Write-Host "ID: $id"
          $teamkvp = ($matches.Matches | Where-Object {$_.Value.contains('com.apple.developer.team-identifier')}).Value
          Write-Host "Team key value pair: $teamkvp"
          $teammatch = $teamkvp | Select-String $valuepattern
          Write-Host "Team match: $teammatch"
          $teamid = $teammatch.Matches[0].Groups[1].Value
          Write-Host "Team id: $teamid"
          $bundleid = $id.Replace($teamid + ".","")
          Write-Host "Bundle id : $bundleid"
          Write-Host "##vso[task.setvariable variable=bundle_id]$bundleid"

    - task: PowerShell@2
      condition: and( succeeded(), and( eq( variables['manifestPath'], ''), eq( variables['build_enabled'],'true') ) )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Finding Package Plist (ie Info.plist). Set ios_plist_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "Info.plist" -Path "$(System.DefaultWorkingDirectory)"  -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "##vso[task.setvariable variable=manifestPath]$manifest"

    - task: ios-bundle-version@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Setting application version in ${{ parameters.ios_plist_filename }}'
      inputs:
        sourcePath: '$(manifestPath)'
        versionCodeOption: 'buildid'
        versionCode: '${{ parameters.build_number }}'
        versionName: '${{ parameters.full_version_number }}' 
        printFile: true

    - task: ios-bundle-version@1
      condition: and( succeeded(), and( neq( variables['bundle_id'], ''), eq( variables['build_enabled'],'true') ) )
      displayName: 'Setting application bundle id ${{ parameters.ios_plist_filename }}'
      inputs:
        sourcePath: '$(manifestPath)'
        bundleIdenifier: '$(bundle_id)'
        printFile: true
 

    - task: PowerShell@2
      condition: and( succeeded(), and( eq( variables['signing_identity'], ''), eq( variables['build_enabled'],'true') ) )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Extracting certificate CN $env:APPLE_CERTIFICATE_SIGNING_IDENTITY"
          $cn = $env:APPLE_CERTIFICATE_SIGNING_IDENTITY
          Write-Host "Signing Identity: $cn"
          Write-Host "##vso[task.setvariable variable=signing_identity]$cn"

    - task: PowerShell@2
      condition: and( succeeded(), and( eq( variables['prov_profile'], ''), eq( variables['build_enabled'],'true') ) )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Extracting profile id $env:APPLE_PROV_PROFILE_UUID"
          
          $cn = $env:APPLE_PROV_PROFILE_UUID
          Write-Host "Provisioning Profile: $cn"
          Write-Host "##vso[task.setvariable variable=prov_profile]$cn"

          
    - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh '${{ parameters.xamarin_sdk_version }}'
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Select the Xamarin SDK version'

    - task: UseDotNet@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use .Net Core sdk ${{ parameters.net_core_version }}'
      inputs:
        version: '${{ parameters.net_core_version }}'

    - task: NuGetToolInstaller@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use NuGet ${{ parameters.nuget_version }}'
      inputs:
        versionSpec: '${{ parameters.nuget_version }}'

    - task: NuGetCommand@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
      inputs:
        restoreSolution: '${{ parameters.solution_filename }}'

    - ${{ parameters.preBuild }}

    - task: XamariniOS@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Building solution ${{ parameters.solution_filename }}'
      inputs:
        solutionFile: '${{ parameters.solution_filename }}'
        configuration: '${{ parameters.solution_build_configuration }}'
        buildForSimulator: false
        packageApp: true
        signingIdentity: '$(signing_identity)'
        signingProvisioningProfileID: '$(prov_profile)'

    - ${{ parameters.postBuild }}

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Copying files to artifact folder ${{ parameters.artifact_folder }}'
      inputs:
        contents: '**/*.ipa'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Get-ChildItem -Filter "*.ipa" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host

    - ${{ parameters.prePublish }}

    - task: PublishBuildArtifacts@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        pathtoPublish: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}' 
        publishLocation: 'Container'

    - ${{ parameters.onEnd }}




