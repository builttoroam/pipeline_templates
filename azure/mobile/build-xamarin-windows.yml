parameters:
- name: stage_name
  type: string
  default: 'Windows'
- name: depends_on
  type: stageList
  default: []
- name: build_windows_enabled
  type: string
  default: 'true'
- name: solution_filename
  type: string
- name: solution_build_configuration
  type: string
  default: Release
- name: build_platform
  type: string
  default: 'x86'
- name: uwpBuildPlatform
  type: string
  default: 'x86|x64|ARM'
- name: windows_package_manifest_filename
  type: string
  default: ''
- name:  windows_cert_securefiles_filename
  type: string
- name: windows_cert_password
  type: string
- name: build_number
  type: string
  default: '$(Build.BuildId)'
- name: full_version_number
  type: string
  default: '1.0.$(Build.BuildId)'
- name: nuget_version
  type: string
  default: '4.4.1'
- name: net_core_version 
  type: string 
  default: '3.0.x'
- name: artifact_name
  type: string
  default: 'drop'
- name: artifact_folder
  type: string
  default: 'Windows'
- name: application_package
  type: string
  default: 'SignedWindows.appxbundle'
- name: windows_appxupload_name
  type: string
  default: 'Windows.appxupload'
- name: onStart
  type: stepList
  default: []
- name: preBuild
  type: stepList
  default: []
- name: postBuild
  type: stepList
  default: []
- name: prePublish
  type: stepList
  default: []
- name: onEnd
  type: stepList
  default: []

stages:
- stage: ${{ parameters.stage_name }}
  dependsOn: ${{ parameters.depends_on }} 
  variables: 
    - name: build_enabled
      value: ${{ parameters.build_windows_enabled }}
    - name: cert_thumbprint
      value: ''
    - name: cert_subject
      value: ''
    - name: appxPackageDir
      value: '$(System.DefaultWorkingDirectory)\AppxPackages'
    - name: manifestPath
      value: ${{ parameters.windows_package_manifest_filename}}
  
  pool:
    vmImage: 'windows-latest'

  jobs:
  - job: BuildWindows

    steps:
    - task: DownloadSecureFile@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Download secure file'
      name: signing_certificate
      inputs:
        secureFile: '${{ parameters.windows_cert_securefiles_filename }}'

    - ${{ parameters.onStart }}

    - task: PowerShell@2
      condition: and( eq( variables['manifestPath'], ''), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Write-Host "Finding Package Manifest (ie .appxmanifest). Set windows_package_manifest_filename parameter to override"
          $manifest = (Get-ChildItem -Filter "*.appxmanifest" -Path "$(System.DefaultWorkingDirectory)"  -Recurse | Select-Object -First 1 ).FullName
          Write-Host "Found at $manifest"
          Write-Host "##vso[task.setvariable variable=manifestPath]$manifest"

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline
        script: |
          Write-Host "Start adding the PFX file to the certificate store."

          $pfxpath = '$(signing_certificate.secureFilePath)'
          $password = '${{ parameters.windows_cert_password }}'
          
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close() 
          
          $thumb = $cert.thumbprint
          $subject = $cert.subject
          Write-Host "Thumbprint: $thumb  Subject: $subject"

          Write-Host "##vso[task.setvariable variable=cert_thumbprint]$thumb"
          Write-Host "##vso[task.setvariable variable=cert_subject]$subject"

          Write-Host "Variables exported"

    - task: MagicChunks@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Set version number - $(manifestPath)'
      inputs:
        sourcePath: $(manifestPath)
        fileType: Xml
        targetPathType: 'source'
        transformationType: 'json'
        transformations: |
          {
            "Package/Identity/@Version": "${{ parameters.full_version_number }}.0",
            "Package/Identity/@Publisher": "$(cert_subject)"
          }
        
    - task: NuGetToolInstaller@0
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Use NuGet ${{ parameters.nuget_version }}'
      inputs:
        versionSpec: '${{ parameters.nuget_version }}'

    - task: NuGetCommand@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Restore NuGet for solution ${{ parameters.solution_filename }}'
      inputs:
        restoreSolution: '${{ parameters.solution_filename }}'

    - ${{ parameters.preBuild }}

    - task: VSBuild@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Build solution ${{ parameters.solution_filename }}'
      inputs:
        solution: ${{ parameters.solution_filename }}
        msbuildArgs: '/p:AppxBundlePlatforms="${{ parameters.uwpBuildPlatform }}" 
              /p:DebugSymbols=false 
              /p:DebugType=None 
              /p:AppxPackageDir="$(appxPackageDir)"
              /p:AppxBundle=Always 
              /p:AppxPackageSigningEnabled=true 
              /p:UapAppxPackageBuildMode=StoreUpload 
              /p:platform="${{ parameters.build_platform }}" 
              /p:PackageCertificateThumbprint="$(cert_thumbprint)" 
              /p:PackageCertificateKeyFile="$(signing_certificate.secureFilePath)" 
              /p:PackageCertificatePassword="${{ parameters.windows_cert_password }}"'
        configuration: '${{ parameters.solution_build_configuration }}'

    - ${{ parameters.postBuild }}

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        contents: '$(appxPackageDir)\**\*.*xbundle'
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true       

    - task: CopyFiles@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        contents: '$(appxPackageDir)\**\*.*xupload' 
        targetFolder: '$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}'
        flattenFolders: true
        overWrite: true

    - task: PowerShell@2
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      inputs:
        targetType: 'inline'                                                                                                 
        script: |
          Get-ChildItem -Filter "*.*xbundle" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.application_package }}" | Write-Host
          Get-ChildItem -Filter "*.*xupload" -Path "$(build.artifactStagingDirectory)/${{ parameters.artifact_folder }}"  -Recurse | Select-Object -First 1 | Rename-Item -NewName "${{ parameters.windows_appxupload_name }}" | Write-Host

    - ${{ parameters.prePublish }}
 
    - task: PublishPipelineArtifact@1
      condition: and( succeeded(), eq( variables['build_enabled'],'true') )
      displayName: 'Publishing artifacts to ${{ parameters.artifact_name }}'
      inputs:
        targetPath: '$(build.artifactStagingDirectory)' 
        artifactName: '${{ parameters.artifact_name }}'

    - ${{ parameters.onEnd }}


