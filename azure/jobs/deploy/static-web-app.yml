parameters:
# vm_image - (Optional) The name of the vm image to use for execution. Defaults to ubuntu-latest
- name: vm_image
  type: string
  default: 'ubuntu-latest'
# environment_name - (Optional) The environment to deploy to. Can be used to introduce a manual gate for approval for stage to proceed
- name: environment_name
  type: string
  default: 'Default'

# artifact_name - (Optional) The name of the artifact to copy application from
- name: artifact_name
  type: string
  default: 'drop'
# artifact_folder - (Required) The name of the folder to copy application from in the artifact
- name: artifact_folder
  type: string

# staticwebapp_name - (Optional) The name of the static web app to deploy too (Required if staticwebapp_token not specified)
- name: staticwebapp_name
  type: string
  default: ''

# azure_subscription_connection_name - (Optional) Required if staticwebapp_token is not specified
- name: azure_subscription_connection_name
  type: string
  default: ''

# resource_group_name  - (Optional)  Required if staticwebapp_token is not specified
- name: resource_group_name 
  type: string
  default: ''

# staticwebapp_token - (Optional) The token for deploying a static web app (Required if staticwebapp_name not specified)
- name: staticwebapp_token
  type: string
  default: ''

# onStart - (Optional) Steps to be executed before stage starts
- name: onStart
  type: stepList
  default: []
# postArtifactDownload - (Optional) Steps to be executed after artifacts from previous stages have been downloaded
- name: postArtifactDownload
  type: stepList
  default: []
# prePublish - (Optional) Steps to be executed before application package is published to App Center
- name: prePublish
  type: stepList
  default: []
# onEnd - (Optional) Steps to be executed at the end of the stage
- name: onEnd
  type: stepList
  default: []

jobs:
- deployment: Deploy
  displayName: Deploy app to Static Web App
  ${{ if ne( parameters.environment_name , '') }}:
    environment: ${{ parameters.environment_name }}

  pool:
    vmImage: '${{ parameters.vm_image }}'

  variables:
  - name: swa_token
    value: ${{ parameters.staticwebapp_token }}

  strategy:
    runOnce:
      deploy:
        steps:

          - task: Bash@3
            displayName: 'Parameters'
            condition: and( succeeded(), eq(variables['agent.diagnostic'], 'true') )
            inputs:
              targetType: inline
              script: |
                echo -------------------------------------------------------------
                echo -------------------------------------------------------------
                echo Vm image: "${{ parameters.vm_image }}"
                echo Enivronment name: "${{ parameters.environment_name }}"
                echo Artiface name: "${{ parameters.artifact_name }}"
                echo Artiface folder: "${{ parameters.artifact_folder }}"
                echo Static web app name: "${{ parameters.staticwebapp_name }}"
                echo Azure subscription connection name: "${{ parameters.azure_subscription_connection_name }}"
                echo Resource group name: "${{ parameters.resource_group_name  }}"
                echo Static web app token: "${{ parameters.staticwebapp_token }}"
                echo On start: ${{ length(parameters.onStart) }}  steps
                echo Post artifact download : ${{ length(parameters.postArtifactDownload) }}  steps
                echo Pre publish: ${{ length(parameters.prePublish) }}  steps
                echo On end: ${{ length(parameters.onEnd) }}  steps
                echo -------------------------------------------------------------
                echo -------------------------------------------------------------

          # onStart steps - performed after any secure files are downloaded but before 
          # artifacts are downloaded and any other steps
          - ${{ parameters.onStart }}

          # Download the artifacts
          - task: DownloadBuildArtifacts@0
            displayName: Download pipeline artifacts
            inputs:
              buildType: 'current' 
              artifactName: ${{ parameters.artifact_name }}
              downloadPath: '$(Pipeline.Workspace)'
              buildVersionToDownload: 'latest'

          - ${{ parameters.postArtifactDownload }}

          - task: AzureCLI@2
            displayName: Retrieve static web app token for deployment
            condition: and( succeeded(), eq( variables['swa_token'], '') )
            inputs:
              azureSubscription: '${{ parameters.azure_subscription_connection_name }}'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $webapptoken = (az staticwebapp secrets list --name ${{ parameters.staticwebapp_name }} --query properties.apiKey --resource-group ${{ parameters.resource_group_name }}).trim("""")
                Write-Host "Token >$webapptoken<"
                Write-Host "##vso[task.setvariable variable=swa_token]$webapptoken"


          - ${{ parameters.prePublish }}
                
          - task: AzureStaticWebApp@0
            displayName: Deploy to Static Web App
            inputs:
              app_location: '${{ parameters.artifact_folder }}'
              azure_static_web_apps_api_token: '$(swa_token)'
              cwd: '$(Pipeline.Workspace)/${{ parameters.artifact_name }}'
              skip_app_build: true

          - ${{ parameters.onEnd }}

